Problem 1B:


For part (a) we have the formula:

	PhCH3 + KMnO4 + H2SO4 → PhCOOH + K2SO4 + MnSO4 + H2O.

For each substance add a corresponding x value as a weight.

x1PhCH3 + x2KMnO4 + x3H2SO4 → x4PhCOOH + x5K2SO4 +  x6MnSO4 +  x7H2O.

To make a coefficient matrix we use the homogeneous equation Ax=0 where x is our unknown stoichiometric coefficients.  

The columns correspond to each substance, and the rows reflect our elements/psuedo-elements.
Setting up the system like this:

{█(Ph:x_1-x_4=0@C: x_1-x_4=0@H:3x_1+〖2x〗_3- x_4-〖2x〗_7=0@K: x_2-〖2x〗_5=0@Mn:x_2-x_5= 0@O: 〖4x〗_2+〖2x〗_3- 2x_4- 〖4x〗_5- 〖4x〗_6-x_7=0@S:x_3-x_5- x_6=0)┤

This system was converted into the coefficient matrix for PartA. A similar process for defining the matrix “A” was followed in parts B and C. 
Matlab I/O with annotations.

Put the commands into a script without control flow. Here it is in its entirety, each line of code is also in the commentary before its respective outputs.

File: Stoichiometric.m (line numbers added for reference, omit upon entry):

Line 1: A = input( 'Enter in your coefficient matrix A: ' );
Line 2: [R,jb] = rref(A);
Line 3: disp(R);                          %R will be row reduced matrix, jb an array pivot columns
Line 4: FreeVar = setdiff(1:size(A,2),jb) %Extrapolate from pivots the free variable index
Line 5: x = -R(:, FreeVar);               %Part 1: Parametric vector form. Note negation 
Line 6: x(FreeVar) = 1                    %Part 2: 1 in position corresponding to parameter
Line 7: CoEff = (x/min(x))                %Divide by the smallest element of parameterized vector
Line 8: a = input('Select scalar a: ');   %Want integer value moles as coefficients
Line 9: CoEff = a*CoEff                   %Our Stoichiometric Coefficients

Highlighted Green is output.
Highlighted Yellow is commentary.
Final answer in blue.

>> PartA = [

     1     0     0    -1     0     0     0
     1     0     0    -1     0     0     0
     3     0     2    -1     0     0    -2
     0     1     0     0    -2     0     0
     0     1     0     0     0    -1     0
     0     4     4    -2    -4    -4    -1
     0     0     1     0    -1    -1     0 ]
PartA =
     1     0     0    -1     0     0     0
     1     0     0    -1     0     0     0
     3     0     2    -1     0     0    -2
     0     1     0     0    -2     0     0
     0     1     0     0     0    -1     0
     0     4     4    -2    -4    -4    -1
     0     0     1     0    -1    -1     0
>> PartB = [

     4     1     0    -1     0     0     0     0     0
     1     0     0     0    -2     0     0     0     0
     6     0     0     0     0     0     0    -1     0
     6     0     0     0     0     0    -1     0     0
     0     1     0     0     0    -1     0     0     0
     0     4     4    -4   -12    -4    -3    -2    -1
     0     0     2    -1     0     0    -1     0    -2
     0     0     1    -1    -3    -1     0     0     0 ]
PartB =
     4     1     0    -1     0     0     0     0     0
     1     0     0     0    -2     0     0     0     0
     6     0     0     0     0     0     0    -1     0
     6     0     0     0     0     0    -1     0     0
     0     1     0     0     0    -1     0     0     0
     0     4     4    -4   -12    -4    -3    -2    -1
     0     0     2    -1     0     0    -1     0    -2
     0     0     1    -1    -3    -1     0     0     0
>> PartC = [

     1     0    -3     0     0     0
     6     0     0     0     0    -1
     0     1     0    -2     0     0
     0     2     0     0    -1     0
     0     8    -4    -3    -2    -1 ]
PartC =
     1     0    -3     0     0     0
     6     0     0     0     0    -1
     0     1     0    -2     0     0
     0     2     0     0    -1     0
     0     8    -4    -3    -2    -1

These are matrices corresponding to each of the three assigned chemical equations.

>> Stoichiometric
Enter in your coefficient matrix A: PartA

Using rref to get RREF of matrix.
From the script: [R,jb] = rref(A);

R =
    1.0000         0         0         0         0         0   -0.3571
         0    1.0000         0         0         0         0   -0.4286
         0         0    1.0000         0         0         0   -0.6429
         0         0         0    1.0000         0         0   -0.3571
         0         0         0         0    1.0000         0   -0.2143
         0         0         0         0         0    1.0000   -0.4286
         0         0         0         0         0         0         0

jb is a set which contains the indices for our free variable columns. Pass a one through n set and jb pivots set (from rref command) to setdiff to extrapolate which of the n-columns correspond to free variables.
From script: FreeVar = setdiff(1:size(A,2),jb)

FreeVar = 7

Negating necessary in this application to “move” these to the other side of the equation. Seeing that the non-pivot columns are all negative for this application it makes sense to do this every time. Also, it makes no sense to have negative moles (a physical quantity SI unit) in a chemical equation. 
Supressed output for an intermediary command, but not the next which inserts a 1 into the entry vector corresponding to the free variable. x is our solution vector.
From script: x = -R(:, FreeVar); 
x(FreeVar) = 1                                    

x =
    0.3571
    0.4286
    0.6429
    0.3571
    0.2143
    0.4286
    1.0000

A common step in solving chemical equations is to divide by the smallest number of moles to determine a mole ratio.  
From script: CoEff = (x/min(x))
Then we prompt the user for a scalar to make lowest integer ratio.
From script: a = input('Select scalar a: ');  

CoEff =
    1.6667
    2.0000
    3.0000
    1.6667
    1.0000
    2.0000
    4.6667

Select scalar a: 3

[Chose 3 as the common denominator after inspection.]
From script: CoEff = a*CoEff                   

CoEff =
    5.0000
    6.0000
    9.0000
    5.0000
    3.0000
    6.0000
   14.0000

These are our final coefficients. Balanced equation for part A we have:

	5PhCH3 + 6KMnO4 + 9H2SO4 → 5PhCOOH + 3K2SO4 + 6MnSO4 + 14H2O.

The steps for b and c are the same with different numbers and sizes. At the end of each is the balanced equation.

>> Stoichiometric
Enter in your coefficient matrix A: PartB

R =
1.0000    0         0         0    	    0         0         0         0   -0.0532
0         1.0000     0        0         0         0     	0    	    0   -0.6489
0         0    1.0000         0         0         0         0         0   -1.5904
0         0         0    1.0000         0         0         0         0   -0.8617
0         0         0         0    1.0000         0         0         0   -0.0266
0         0         0         0         0    1.0000         0         0   -0.6489
0         0         0         0         0         0    1.0000         0   -0.3191
0         0         0         0         0         0         0    1.0000   -0.3191

FreeVar = 9
x =
    0.0532
    0.6489
    1.5904
    0.8617
    0.0266
    0.6489
    0.3191
    0.3191
    1.0000

CoEff =
    2.0000
   24.4000
   59.8000
   32.4000
    1.0000
   24.4000
   12.0000
   12.0000
   37.6000

Select scalar a: 5

CoEff =
    10
   122
   299
   162
     5
   122
    60
    60
   188

(b) 10K4Fe(CN)6 + 122KMnO4 + 299H2SO4 → 162KHSO4 + 5Fe2(SO4)3 + 122MnSO4 + 60HNO3 + 60CO2 + 188H2O

>> Stoichiometric
Enter in your coefficient matrix A: PartC

R =
    1.0000         0         0         0         0   -0.1667
         0    1.0000         0         0         0   -0.4889
         0         0    1.0000         0         0   -0.0556
         0         0         0    1.0000         0   -0.2444
         0         0         0         0    1.0000   -0.9778

FreeVar = 6
x =

    0.1667
    0.4889
    0.0556
    0.2444
    0.9778
    1.0000

CoEff =
    3.0000
    8.8000
    1.0000
    4.4000
   17.6000
   18.0000

Select scalar a: 5

CoEff =
    15
    44
     5
    22
    88
    90

(c) 15PbN6 + 44CrMn2O8 → 5Pb3O4 + 22Cr2O3 + 88MnO2 + 90NO

